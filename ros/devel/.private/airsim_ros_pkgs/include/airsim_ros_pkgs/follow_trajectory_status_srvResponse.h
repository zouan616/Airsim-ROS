// Generated by gencpp from file airsim_ros_pkgs/follow_trajectory_status_srvResponse.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_PKGS_MESSAGE_FOLLOW_TRAJECTORY_STATUS_SRVRESPONSE_H
#define AIRSIM_ROS_PKGS_MESSAGE_FOLLOW_TRAJECTORY_STATUS_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Bool.h>

namespace airsim_ros_pkgs
{
template <class ContainerAllocator>
struct follow_trajectory_status_srvResponse_
{
  typedef follow_trajectory_status_srvResponse_<ContainerAllocator> Type;

  follow_trajectory_status_srvResponse_()
    : twist()
    , acceleration()
    , success()  {
    }
  follow_trajectory_status_srvResponse_(const ContainerAllocator& _alloc)
    : twist(_alloc)
    , acceleration(_alloc)
    , success(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct follow_trajectory_status_srvResponse_

typedef ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<std::allocator<void> > follow_trajectory_status_srvResponse;

typedef boost::shared_ptr< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse > follow_trajectory_status_srvResponsePtr;
typedef boost::shared_ptr< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse const> follow_trajectory_status_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.twist == rhs.twist &&
    lhs.acceleration == rhs.acceleration &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros_pkgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5ee448f3498f4b7aa7e8f53cb7a5b1c";
  }

  static const char* value(const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5ee448f3498f4b7ULL;
  static const uint64_t static_value2 = 0xaa7e8f53cb7a5b1cULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros_pkgs/follow_trajectory_status_srvResponse";
  }

  static const char* value(const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist twist\n"
"geometry_msgs/Twist acceleration\n"
"std_msgs/Bool success\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.twist);
      stream.next(m.acceleration);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct follow_trajectory_status_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros_pkgs::follow_trajectory_status_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "success: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_PKGS_MESSAGE_FOLLOW_TRAJECTORY_STATUS_SRVRESPONSE_H
