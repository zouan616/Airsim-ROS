// Generated by gencpp from file airsim_ros_pkgs/get_trajectoryRequest.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_PKGS_MESSAGE_GET_TRAJECTORYREQUEST_H
#define AIRSIM_ROS_PKGS_MESSAGE_GET_TRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace airsim_ros_pkgs
{
template <class ContainerAllocator>
struct get_trajectoryRequest_
{
  typedef get_trajectoryRequest_<ContainerAllocator> Type;

  get_trajectoryRequest_()
    : start()
    , goal()
    , twist()
    , acceleration()
    , length(0)
    , width(0)
    , n_pts_per_dir(0)  {
    }
  get_trajectoryRequest_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , goal(_alloc)
    , twist(_alloc)
    , acceleration(_alloc)
    , length(0)
    , width(0)
    , n_pts_per_dir(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _n_pts_per_dir_type;
  _n_pts_per_dir_type n_pts_per_dir;





  typedef boost::shared_ptr< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct get_trajectoryRequest_

typedef ::airsim_ros_pkgs::get_trajectoryRequest_<std::allocator<void> > get_trajectoryRequest;

typedef boost::shared_ptr< ::airsim_ros_pkgs::get_trajectoryRequest > get_trajectoryRequestPtr;
typedef boost::shared_ptr< ::airsim_ros_pkgs::get_trajectoryRequest const> get_trajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.twist == rhs.twist &&
    lhs.acceleration == rhs.acceleration &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.n_pts_per_dir == rhs.n_pts_per_dir;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros_pkgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc5551f38ef9e3d9d3f15c53146267ff";
  }

  static const char* value(const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc5551f38ef9e3d9ULL;
  static const uint64_t static_value2 = 0xd3f15c53146267ffULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros_pkgs/get_trajectoryRequest";
  }

  static const char* value(const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point start\n"
"geometry_msgs/Point goal\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Twist acceleration\n"
"int32 length\n"
"int32 width\n"
"int32 n_pts_per_dir\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.twist);
      stream.next(m.acceleration);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.n_pts_per_dir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_trajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros_pkgs::get_trajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "n_pts_per_dir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_pts_per_dir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_PKGS_MESSAGE_GET_TRAJECTORYREQUEST_H
